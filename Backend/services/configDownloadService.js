const fs = require("fs");
const path = require("path");
const { generatePDF } = require("./pdfGenerator");
const AppError = require("../utils/appError");

exports.generateConfigPDF = async (config) => {
  try {
    // Create PDF content structure
    const pdfContent = {
      title: `Configuration for ${config.equipment.model}`,
      subtitle: `Generated from template: ${config.template.name}`,
      metadata: {
        Design: config.design.designName,
        Equipment: `${config.equipment.vendor} ${config.equipment.model}`,
        "Config Type": config.configType,
        "Generated At": config.createdAt.toLocaleString(),
        "Generated By": config.generatedBy.name || config.generatedBy.email,
      },
      content: [
        {
          type: "heading",
          text: "Configuration Details",
          level: 2,
        },
        {
          type: "text",
          text: "Below is the complete device configuration generated from the template:",
        },
        {
          type: "code",
          text: config.configuration,
          language: "network-config",
        },
        {
          type: "heading",
          text: "Variable Values Used",
          level: 3,
        },
        {
          type: "table",
          data: [
            ["Variable", "Value", "Description"],
            ...config.variableValues.map((v) => [
              v.name,
              v.value,
              config.template.variables.find((tv) => tv.name === v.name)
                ?.description || "",
            ]),
          ],
        },
      ],
    };

    // Generate PDF file
    const pdfBuffer = await generatePDF(pdfContent);

    // Save to temporary file (in production, you might stream directly to response)
    const fileName = `config-${config._id}-${Date.now()}.pdf`;
    const filePath = path.join(__dirname, "../temp", fileName);

    // Ensure temp directory exists
    if (!fs.existsSync(path.dirname(filePath))) {
      fs.mkdirSync(path.dirname(filePath), { recursive: true });
    }

    fs.writeFileSync(filePath, pdfBuffer);

    return {
      filePath,
      fileName,
      url: `/public/configFiles/${fileName}`,
    };
  } catch (error) {
    console.error("PDF generation failed:", error);
    throw new AppError("Failed to generate configuration PDF", 500);
  }
};
